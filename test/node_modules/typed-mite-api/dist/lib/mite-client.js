"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiteClient = void 0;
var RestClient_1 = require("typed-rest-client/RestClient");
var mite_endpoints_1 = require("./mite-endpoints");
/**
 * Typesafe client for interacting with the Mite API
 * Handles authentication and provides methods for accessing Mite resources
 * @see https://mite.de/api
 *
 * Author: @iotacb (https://github.com/iotacb)
 */
var MiteClient = /** @class */ (function () {
    /**
     * Creates a new instance of the MiteClient
     * @param userAgent - The user agent string to use for API requests
     * @param accountName - The Mite account name (subdomain)
     * @param apiKey - The API key for authentication
     */
    function MiteClient(userAgent, accountName, apiKey) {
        this.baseUrl = "https://".concat(accountName, ".mite.de/");
        this.client = new RestClient_1.RestClient(userAgent, this.baseUrl);
        this.accountName = accountName;
        this.apiKey = apiKey;
    }
    /**
     * Gets the required headers for Mite API authentication
     * @returns Headers object containing Mite account and API key
     * @private
     */
    MiteClient.prototype.getHeaders = function () {
        return {
            "X-MiteAccount": this.accountName,
            "X-MiteApiKey": this.apiKey,
        };
    };
    /**
     * Utility function to convert date strings to Date objects
     */
    MiteClient.prototype.convertDates = function (obj) {
        var dateFields = ["created_at", "updated_at", "date_at"];
        var result = __assign({}, obj);
        dateFields.forEach(function (field) {
            if (field in result && result[field]) {
                result[field] = new Date(result[field]);
            }
        });
        return result;
    };
    /**
     * Generic response handler for Mite API calls
     */
    MiteClient.prototype.handleResponse = function (response, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (response.statusCode !== 200 || !response.result) {
                    return [2 /*return*/, Array.isArray(response.result) ? [] : null];
                }
                if (Array.isArray(response.result)) {
                    return [2 /*return*/, response.result.map(function (item) {
                            return _this.convertDates(dataKey ? item[dataKey] : item);
                        })];
                }
                return [2 /*return*/, this.convertDates(dataKey ? response.result[dataKey] : response.result)];
            });
        });
    };
    /**
     * Build query string from filter object
     */
    MiteClient.prototype.buildQueryString = function (filter) {
        if (!filter)
            return "";
        var queryParams = Object.entries(filter)
            .filter(function (_a) {
            var _ = _a[0], value = _a[1];
            return value !== undefined;
        })
            .map(function (_a) {
            var key = _a[0], value = _a[1];
            if (Array.isArray(value)) {
                return "".concat(key, "=").concat(value.join(","));
            }
            if (typeof value === "object") {
                return Object.entries(value)
                    .map(function (_a) {
                    var k = _a[0], v = _a[1];
                    return "".concat(key, "[").concat(k, "]=").concat(v);
                })
                    .join("&");
            }
            return "".concat(key, "=").concat(value);
        });
        return queryParams.length ? "?".concat(queryParams.join("&")) : "";
    };
    /**
     * Retrieves information for your mite account
     * @returns Promise resolving to MiteAccount object if successful, null otherwise
     */
    MiteClient.prototype.getAccount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.account, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, this.handleResponse(response, "account")];
                    case 2: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    /**
     * Retrieves information about the currently authenticated user
     * @returns Promise resolving to MiteUser object if successful, null otherwise
     */
    MiteClient.prototype.getMyself = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.myself, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, this.handleResponse(response, "user")];
                    case 2: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    /**
     * Retrieves all time entries
     * @param filter - Optional filter parameters to refine the query
     * @returns Promise resolving to an array of MiteTimeEntry objects
     */
    MiteClient.prototype.getTimeEntries = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var queryString, endpoint, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryString = this.buildQueryString(filter);
                        endpoint = "".concat(mite_endpoints_1.miteEndpoints.time_entries, ".json").concat(queryString);
                        return [4 /*yield*/, this.client.get(endpoint, { additionalHeaders: this.getHeaders() })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, this.handleResponse(response, "time_entry")];
                    case 2: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    /**
     * Retrieves daily time entries for the current user
     * @param filter - Optional filter parameters to refine the query
     * @returns Promise resolving to an array of MiteTimeEntry objects
     */
    MiteClient.prototype.getDailyTimeEntries = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getTimeEntries(__assign(__assign({}, filter), { at: "today" }))];
            });
        });
    };
    /**
     * Retrieves time entries for a specific project
     * @param projectId - The ID of the project
     * @returns Promise resolving to an array of MiteTimeEntry objects
     */
    MiteClient.prototype.getTimeEntriesOfProject = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getTimeEntries({
                        project_id: projectId,
                    })];
            });
        });
    };
    /**
     * Retrieves time entries for a specific customer
     * @param customerId - The ID of the customer
     * @returns Promise resolving to an array of MiteTimeEntry objects
     */
    MiteClient.prototype.getTimeEntriesOfCustomer = function (customerId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getTimeEntries({
                        customer_id: customerId,
                    })];
            });
        });
    };
    /**
     * Retrieves a specific time entry by its ID
     * @param timeEntryId - The ID of the time entry
     * @returns Promise resolving to a MiteTimeEntry object if found, null otherwise
     */
    MiteClient.prototype.getTimeEntry = function (timeEntryId) {
        return __awaiter(this, void 0, void 0, function () {
            var timeEntries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTimeEntries()];
                    case 1:
                        timeEntries = _a.sent();
                        return [2 /*return*/, (timeEntries.find(function (timeEntry) { return timeEntry.id === timeEntryId; }) || null)];
                }
            });
        });
    };
    /**
     * Retrieves all customers
     * @returns Promise resolving to an array of MiteCustomer objects
     */
    MiteClient.prototype.getCustomers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.customers, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200 && response.result) {
                            return [2 /*return*/, response.result.map(function (_a) {
                                    var customer = _a.customer;
                                    return (__assign(__assign({}, customer), { created_at: customer.created_at
                                            ? new Date(customer.created_at)
                                            : customer.created_at, updated_at: customer.updated_at
                                            ? new Date(customer.updated_at)
                                            : customer.updated_at }));
                                })];
                        }
                        return [2 /*return*/, []];
                }
            });
        });
    };
    /**
     * Retrieves a specific customer by their ID
     * @param customerId - The ID of the customer
     * @returns Promise resolving to a MiteCustomer object if found, null otherwise
     */
    MiteClient.prototype.getCustomer = function (customerId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.customers, "/").concat(customerId, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, this.handleResponse(response, "customer")];
                    case 2: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    /**
     * Retrieves all projects
     * @returns Promise resolving to an array of MiteProject objects
     */
    MiteClient.prototype.getProjects = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.projects, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200 && response.result) {
                            return [2 /*return*/, response.result.map(function (_a) {
                                    var project = _a.project;
                                    return (__assign(__assign({}, project), { created_at: project.created_at
                                            ? new Date(project.created_at)
                                            : project.created_at, updated_at: project.updated_at
                                            ? new Date(project.updated_at)
                                            : project.updated_at }));
                                })];
                        }
                        return [2 /*return*/, []];
                }
            });
        });
    };
    /**
     * Retrieves a specific project by its ID
     * @param projectId - The ID of the project
     * @returns Promise resolving to a MiteProject object if found, null otherwise
     */
    MiteClient.prototype.getProject = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.projects, "/").concat(projectId, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200 && response.result) {
                            return [2 /*return*/, __assign(__assign({}, response.result.project), { created_at: response.result.project.created_at
                                        ? new Date(response.result.project.created_at)
                                        : response.result.project.created_at, updated_at: response.result.project.updated_at
                                        ? new Date(response.result.project.updated_at)
                                        : response.result.project.updated_at })];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Retrieves all available services
     * @returns Promise resolving to an array of MiteService objects
     */
    MiteClient.prototype.getServices = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.services, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200 && response.result) {
                            return [2 /*return*/, response.result.map(function (_a) {
                                    var service = _a.service;
                                    return (__assign(__assign({}, service), { created_at: service.created_at
                                            ? new Date(service.created_at)
                                            : service.created_at, updated_at: service.updated_at
                                            ? new Date(service.updated_at)
                                            : service.updated_at }));
                                })];
                        }
                        return [2 /*return*/, []];
                }
            });
        });
    };
    /**
     * Retrieves a specific service by its ID
     * @param serviceId - The ID of the service
     * @returns Promise resolving to a MiteService object if found, null otherwise
     */
    MiteClient.prototype.getService = function (serviceId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.services, "/").concat(serviceId, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200 && response.result) {
                            return [2 /*return*/, __assign(__assign({}, response.result.service), { created_at: response.result.service.created_at
                                        ? new Date(response.result.service.created_at)
                                        : response.result.service.created_at, updated_at: response.result.service.updated_at
                                        ? new Date(response.result.service.updated_at)
                                        : response.result.service.updated_at })];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Retrieves all users
     * @returns Promise resolving to an array of MiteUser objects
     */
    MiteClient.prototype.getUsers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.users, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200 && response.result) {
                            return [2 /*return*/, response.result.map(function (_a) {
                                    var user = _a.user;
                                    return (__assign(__assign({}, user), { created_at: user.created_at
                                            ? new Date(user.created_at)
                                            : user.created_at, updated_at: user.updated_at
                                            ? new Date(user.updated_at)
                                            : user.updated_at }));
                                })];
                        }
                        return [2 /*return*/, []];
                }
            });
        });
    };
    /**
     * Retrieves a specific user by their ID
     * @param userId - The ID of the user
     * @returns Promise resolving to a MiteUser object if found, null otherwise
     */
    MiteClient.prototype.getUser = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.get("".concat(mite_endpoints_1.miteEndpoints.users, "/").concat(userId, ".json"), {
                            additionalHeaders: this.getHeaders(),
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.statusCode === 200 && response.result) {
                            return [2 /*return*/, __assign(__assign({}, response.result.user), { created_at: response.result.user.created_at
                                        ? new Date(response.result.user.created_at)
                                        : response.result.user.created_at, updated_at: response.result.user.updated_at
                                        ? new Date(response.result.user.updated_at)
                                        : response.result.user.updated_at })];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    return MiteClient;
}());
exports.MiteClient = MiteClient;
