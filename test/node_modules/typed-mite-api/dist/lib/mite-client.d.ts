import { MiteAccount, MiteCustomer, MiteProject, MiteService, MiteTimeEntry, MiteUser, TimeEntriesFilter } from "./mite-types";
/**
 * Typesafe client for interacting with the Mite API
 * Handles authentication and provides methods for accessing Mite resources
 * @see https://mite.de/api
 *
 * Author: @iotacb (https://github.com/iotacb)
 */
export declare class MiteClient {
    private readonly baseUrl;
    private readonly client;
    private readonly accountName;
    private readonly apiKey;
    /**
     * Creates a new instance of the MiteClient
     * @param userAgent - The user agent string to use for API requests
     * @param accountName - The Mite account name (subdomain)
     * @param apiKey - The API key for authentication
     */
    constructor(userAgent: string, accountName: string, apiKey: string);
    /**
     * Gets the required headers for Mite API authentication
     * @returns Headers object containing Mite account and API key
     * @private
     */
    private getHeaders;
    /**
     * Utility function to convert date strings to Date objects
     */
    private convertDates;
    /**
     * Generic response handler for Mite API calls
     */
    private handleResponse;
    /**
     * Build query string from filter object
     */
    private buildQueryString;
    /**
     * Retrieves information for your mite account
     * @returns Promise resolving to MiteAccount object if successful, null otherwise
     */
    getAccount(): Promise<MiteAccount | null>;
    /**
     * Retrieves information about the currently authenticated user
     * @returns Promise resolving to MiteUser object if successful, null otherwise
     */
    getMyself(): Promise<MiteUser | null>;
    /**
     * Retrieves all time entries
     * @param filter - Optional filter parameters to refine the query
     * @returns Promise resolving to an array of MiteTimeEntry objects
     */
    getTimeEntries(filter?: TimeEntriesFilter): Promise<MiteTimeEntry[]>;
    /**
     * Retrieves daily time entries for the current user
     * @param filter - Optional filter parameters to refine the query
     * @returns Promise resolving to an array of MiteTimeEntry objects
     */
    getDailyTimeEntries(filter?: TimeEntriesFilter): Promise<MiteTimeEntry[]>;
    /**
     * Retrieves time entries for a specific project
     * @param projectId - The ID of the project
     * @returns Promise resolving to an array of MiteTimeEntry objects
     */
    getTimeEntriesOfProject(projectId: number): Promise<MiteTimeEntry[]>;
    /**
     * Retrieves time entries for a specific customer
     * @param customerId - The ID of the customer
     * @returns Promise resolving to an array of MiteTimeEntry objects
     */
    getTimeEntriesOfCustomer(customerId: number): Promise<MiteTimeEntry[]>;
    /**
     * Retrieves a specific time entry by its ID
     * @param timeEntryId - The ID of the time entry
     * @returns Promise resolving to a MiteTimeEntry object if found, null otherwise
     */
    getTimeEntry(timeEntryId: number): Promise<MiteTimeEntry | null>;
    /**
     * Retrieves all customers
     * @returns Promise resolving to an array of MiteCustomer objects
     */
    getCustomers(): Promise<MiteCustomer[]>;
    /**
     * Retrieves a specific customer by their ID
     * @param customerId - The ID of the customer
     * @returns Promise resolving to a MiteCustomer object if found, null otherwise
     */
    getCustomer(customerId: number): Promise<MiteCustomer | null>;
    /**
     * Retrieves all projects
     * @returns Promise resolving to an array of MiteProject objects
     */
    getProjects(): Promise<MiteProject[]>;
    /**
     * Retrieves a specific project by its ID
     * @param projectId - The ID of the project
     * @returns Promise resolving to a MiteProject object if found, null otherwise
     */
    getProject(projectId: number): Promise<MiteProject | null>;
    /**
     * Retrieves all available services
     * @returns Promise resolving to an array of MiteService objects
     */
    getServices(): Promise<MiteService[]>;
    /**
     * Retrieves a specific service by its ID
     * @param serviceId - The ID of the service
     * @returns Promise resolving to a MiteService object if found, null otherwise
     */
    getService(serviceId: number): Promise<MiteService | null>;
    /**
     * Retrieves all users
     * @returns Promise resolving to an array of MiteUser objects
     */
    getUsers(): Promise<MiteUser[]>;
    /**
     * Retrieves a specific user by their ID
     * @param userId - The ID of the user
     * @returns Promise resolving to a MiteUser object if found, null otherwise
     */
    getUser(userId: number): Promise<MiteUser | null>;
}
